package com.example.healthcalculator

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Spinner
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView
import androidx.core.content.ContextCompat
import java.util.Locale
import kotlin.math.max
import kotlin.math.min

class BeginnerActivity : AppCompatActivity() {

    private var isCreatineExpanded = false
    private var isProteinExpanded = false
    private var isMultivitaminExpanded = false
    private var isOmega3Expanded = false
    private var isHydrationExpanded = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        try {
            setContentView(R.layout.activity_beginner_new)
        } catch (e: Exception) {
            Log.e("BeginnerActivity", "Erro ao inflar o layout: ${e.message}")
            finish()
            return
        }

        val ageSpinner = findViewById<Spinner>(R.id.ageSpinner)
        val sexSpinner = findViewById<Spinner>(R.id.sexSpinner)
        val weightSpinner = findViewById<Spinner>(R.id.weightSpinner)
        val heightSpinner = findViewById<Spinner>(R.id.heightSpinner)
        val mealsSpinner = findViewById<Spinner>(R.id.mealsSpinner)
        val calculateButton = findViewById<Button>(R.id.calculateButton)
        val clearButton = findViewById<Button>(R.id.clearButton)
        val backButton = findViewById<Button>(R.id.backButton)
        val recommendationsTitle = findViewById<TextView>(R.id.recommendationsTitle)
        val supplementsResultContainer = findViewById<LinearLayout>(R.id.supplementsResultContainer)

        calculateButton.setOnClickListener {
            updateResults(
                ageSpinner.selectedItem.toString(),
                sexSpinner.selectedItem.toString(),
                weightSpinner.selectedItem.toString(),
                heightSpinner.selectedItem.toString(),
                mealsSpinner.selectedItem.toString(),
                supplementsResultContainer
            )
        }

        clearButton.setOnClickListener {
            ageSpinner.setSelection(0)
            sexSpinner.setSelection(0)
            weightSpinner.setSelection(0)
            heightSpinner.setSelection(0)
            mealsSpinner.setSelection(0)
            recommendationsTitle.visibility = View.GONE
            supplementsResultContainer.removeAllViews()
            isCreatineExpanded = false
            isProteinExpanded = false
            isMultivitaminExpanded = false
            isOmega3Expanded = false
            isHydrationExpanded = false
        }

        backButton.setOnClickListener {
            finish() // Volta para a tela anterior (MainActivity)
        }
    }

    // Fun√ß√£o para atualizar os resultados
    private fun updateResults(age: String, sex: String, weight: String, height: String, meals: String, supplementsResultContainer: LinearLayout) {
        val recommendationsTitle = findViewById<TextView>(R.id.recommendationsTitle)
        if (age == "Selecione sua idade" || sex == "Selecione seu sexo" ||
            weight == "Selecione seu peso" || height == "Selecione sua altura" ||
            meals == "Selecione suas refei√ß√µes di√°rias") {
            recommendationsTitle.visibility = View.GONE
            supplementsResultContainer.removeAllViews()
            supplementsResultContainer.addView(createErrorView("Preencha todos os campos"))
            return
        }

        // Mostrar o t√≠tulo ao calcular com sucesso
        recommendationsTitle.visibility = View.VISIBLE
        supplementsResultContainer.removeAllViews()

        // Convers√£o de valores
        val weightValue = weight.toInt()
        val heightValue = height.toDouble()
        val mealsValue = meals.toInt()
        val ageValue = age.toInt()

        // C√°lculo de Hidrata√ß√£o
        val hydrationMl = weightValue * 35
        val hydrationL = hydrationMl / 1000.0

        // C√°lculo de Creatina
        val creatineMin = weightValue * 0.03
        val creatineMax = weightValue * 0.07
        val creatineMinFormatted = String.format(Locale.US, "%.1f", creatineMin)
        val creatineMaxFormatted = String.format(Locale.US, "%.1f", creatineMax)

        // C√°lculo de Whey Protein
        val proteinPerKg = 1.0
        val totalProtein = (weightValue * proteinPerKg).toInt()
        val mainMeals = min(mealsValue, 2)
        val lightMeals = max(0, mealsValue - 2)
        val proteinFromMainMeals = mainMeals * 11.15
        val proteinFromLightMeals = lightMeals * 2.0
        val proteinFromFood = proteinFromMainMeals + proteinFromLightMeals
        val proteinDeficit = (totalProtein - proteinFromFood).coerceAtLeast(0.0).toInt()

        // Criar cart√µes expans√≠veis na ordem especificada
        val items = mutableListOf<Triple<String, String, String>>()

        // 1. Creatina (se aplic√°vel)
        if (sex == "Masculino" && ageValue >= 18 || sex == "Feminino" && ageValue >= 18) {
            items.add(Triple("‚ö°", "Creatina", "Dose m√≠nima: $creatineMinFormatted g/dia\nDose m√°xima: $creatineMaxFormatted g/dia"))
        }

        // 2. Whey Protein (se aplic√°vel)
        if (sex == "Masculino" && ageValue >= 18 || sex == "Feminino" && ageValue >= 18) {
            items.add(Triple("ü•õ", "Whey Protein (sugest√£o di√°ria)", "Dose recomendada: $proteinDeficit g/dia"))
        }

        // 3. Hidrata√ß√£o (sempre presente)
        items.add(Triple("üíß", "Hidrata√ß√£o", "Ingest√£o di√°ria sugerida: ${String.format(Locale.US, "%.2f", hydrationL)} litros"))

        // 4. √îmega-3
        val omega3Dose = if (sex == "Masculino" && ageValue >= 18 || sex == "Feminino" && ageValue >= 18) "1000 mg por dia" else "500 mg por dia"
        items.add(Triple("üåø", "√îmega-3", "Dose recomendada: $omega3Dose"))

        // 5. Multivitam√≠nico
        val multivitaminLabel = if (ageValue < 18) "Multivitam√≠nico Infantil" else "Multivitam√≠nico"
        items.add(Triple("üíä", multivitaminLabel, "Dose recomendada: 1 c√°psula por dia"))

        items.forEach { (icon, label, details) ->
            val isExpanded = when (label) {
                "Creatina" -> isCreatineExpanded
                "Whey Protein (sugest√£o di√°ria)" -> isProteinExpanded
                "Multivitam√≠nico", "Multivitam√≠nico Infantil" -> isMultivitaminExpanded
                "√îmega-3" -> isOmega3Expanded
                "Hidrata√ß√£o" -> isHydrationExpanded
                else -> false
            }
            supplementsResultContainer.addView(createExpandableCard(icon, label, details, isExpanded) {
                when (label) {
                    "Creatina" -> isCreatineExpanded = !isCreatineExpanded
                    "Whey Protein (sugest√£o di√°ria)" -> isProteinExpanded = !isProteinExpanded
                    "Multivitam√≠nico", "Multivitam√≠nico Infantil" -> isMultivitaminExpanded = !isMultivitaminExpanded
                    "√îmega-3" -> isOmega3Expanded = !isOmega3Expanded
                    "Hidrata√ß√£o" -> isHydrationExpanded = !isHydrationExpanded
                }
                updateResults(age, sex, weight, height, meals, supplementsResultContainer)
            })
        }
    }

    // Fun√ß√£o para criar um cart√£o expans√≠vel
    private fun createExpandableCard(icon: String, label: String, details: String, isExpanded: Boolean, onClick: () -> Unit): CardView {
        val cardView = LayoutInflater.from(this).inflate(R.layout.result_card, null) as CardView
        cardView.radius = 8f
        cardView.cardElevation = 4f
        cardView.setCardBackgroundColor(ContextCompat.getColor(this, R.color.white))
        cardView.layoutParams = LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.MATCH_PARENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        ).apply { setMargins(0, 0, 0, 16) }

        val cardContent = cardView.findViewById<LinearLayout>(R.id.cardContent)
        val titleText = cardView.findViewById<TextView>(R.id.cardTitle)
        val detailsText = cardView.findViewById<TextView>(R.id.cardDetails)
        val expandButton = cardView.findViewById<TextView>(R.id.expandButton)

        titleText.text = "$icon  $label"
        detailsText.text = details
        detailsText.visibility = if (isExpanded) View.VISIBLE else View.GONE
        expandButton.text = if (isExpanded) "‚ñº" else "‚ñ∂"
        // Alterar a cor com base no estado de expans√£o
        expandButton.setTextColor(ContextCompat.getColor(this, if (isExpanded) android.R.color.holo_orange_light else R.color.blue))
        expandButton.setOnClickListener { onClick() }

        // Tornar o cart√£o inteiro clic√°vel
        cardView.setOnClickListener {
            onClick()
            detailsText.visibility = if (detailsText.visibility == View.GONE) View.VISIBLE else View.GONE
            expandButton.text = if (detailsText.visibility == View.VISIBLE) "‚ñº" else "‚ñ∂"
            expandButton.setTextColor(ContextCompat.getColor(this, if (detailsText.visibility == View.VISIBLE) android.R.color.holo_orange_light else R.color.blue))
        }

        return cardView
    }

    // Fun√ß√£o para criar uma view de erro
    private fun createErrorView(message: String): TextView {
        return TextView(this).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
            text = message
            setTextColor(ContextCompat.getColor(this@BeginnerActivity, R.color.red))
            textSize = 16f
        }
    }

    // Fun√ß√£o auxiliar para encontrar o √≠ndice de um item no Spinner
    private fun getSpinnerIndex(spinner: Spinner, value: String): Int {
        for (i in 0 until spinner.count) {
            if (spinner.getItemAtPosition(i).toString() == value) {
                return i
            }
        }
        return 0 // Retorna 0 se o valor n√£o for encontrado
    }
}